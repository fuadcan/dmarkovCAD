borders
reg_data    <- lapply(1:nrow(borders), function(r) {b <- borders[r,]; data[,b[1]:b[2]]})
reg_data
reg_data[[1]]
data
regions
borders
reg_data
names(reg_data) <- regions[regions!=""]
reg_data
reg_data
sapply(rownames(reg_data[[1]]), function(r) sapply(colnames(reg_data[[1]]), function(c) paste0(r,"-",c)))
c(t(reg_data[[1]]))
c(t(reg_data[[1]][,-1]))
sapply(rownames(reg_data[[1]][-1]), function(r) sapply(colnames(reg_data[[1]][-1]), function(c) paste0(r,"-",c)))
colnames(reg_data[[1]])
rownames(reg_data[[1]])
sapply(rownames(reg_data[[1]]), function(r) sapply(colnames(reg_data[[1]][-1]), function(c) paste0(r,"-",c)))
sapply(rownames(reg_data[[1]]), function(r) sapply(colnames(reg_data[[1]][,-1]), function(c) paste0(r,"-",c)))
t(sapply(rownames(reg_data[[1]]), function(r) sapply(colnames(reg_data[[1]][,-1]), function(c) paste0(r,"-",c))))
c(t(sapply(rownames(reg_data[[1]]), function(r) sapply(colnames(reg_data[[1]][,-1]), function(c) paste0(r,"-",c)))))
c(sapply(rownames(reg_data[[1]]), function(r) sapply(colnames(reg_data[[1]][,-1]), function(c) paste0(r,"-",c))))
c(t(reg_data[[1]][,-1]))
c(t(reg_data[[1]][,-1]))
c(t(reg_data[[1]][,-1]))
c(t(reg_data[[1]][,-1]))
reg_data[[1]]
items
reg_data
reg_data[[1]]
reg_data[[1]]
reg_data[[1]][,1]
!duplicated(reg_data[[1]][,1])
aa <- !duplicated(reg_data[[1]][,1])
aa
which(aa)
items
dat <- read.csv(paste0(datafolder,datalist[1]),sep="|")
dat <- dat[-3,-1]
regions <- sapply(dat[1,], as.character); names(regions) <- c(); regions <- regions[-(1:2)]
months  <- sapply(dat[2,], as.character); names(months) <- c(); months <- months[-(1:2)]
items   <- sapply(dat[,1], as.character); names(items) <- c(); items <- items[-(1:2)]
years   <- dat[-c(1:2),2]
data    <- dat[-(1:2),-c(1:2)]; data <- data[!is.na(years),!is.na(months)]
data    <- as.matrix(data)
rownames(data) <- years[!is.na(years)]
colnames(data) <- months[!is.na(months)]
items   <- items[!is.na(years)]
item_borders <- cbind(which(items!=""), c((which(items!="")-1)[-1],length(items)))
item_borders
items   <- lapply(1:nrow(item_borders), function(r) {b <- borders[r,]; items[b[1]:b[2]]})
items   <- unlist(lapply(items, function(i) rep(i[1], length(i))))
data    <- cbind(items,data)
dat <- read.csv(paste0(datafolder,datalist[1]),sep="|")
dat <- dat[-3,-1]
regions <- sapply(dat[1,], as.character); names(regions) <- c(); regions <- regions[-(1:2)]
months  <- sapply(dat[2,], as.character); names(months) <- c(); months <- months[-(1:2)]
items   <- sapply(dat[,1], as.character); names(items) <- c(); items <- items[-(1:2)]
years   <- dat[-c(1:2),2]
data    <- dat[-(1:2),-c(1:2)]; data <- data[!is.na(years),!is.na(months)]
data    <- as.matrix(data)
rownames(data) <- years[!is.na(years)]
colnames(data) <- months[!is.na(months)]
items   <- items[!is.na(years)]
item_borders <- cbind(which(items!=""), c((which(items!="")-1)[-1],length(items)))
items   <- lapply(1:nrow(item_borders), function(r) {b <- item_borders[r,]; items[b[1]:b[2]]})
items   <- unlist(lapply(items, function(i) rep(i[1], length(i))))
data    <- cbind(items,data)
data
regions <- regions[!is.na(months)]
borders <- cbind(which(regions!=""), c((which(regions!="")-1)[-1],length(regions)))
reg_data  <- lapply(1:nrow(borders), function(r) {b <- borders[r,]; data[,b[1]:b[2]]})
names(reg_data) <- regions[regions!=""]
dat <- read.csv(paste0(datafolder,datalist[1]),sep="|")
dat <- dat[-3,-1]
regions <- sapply(dat[1,], as.character); names(regions) <- c(); regions <- regions[-(1:2)]
months  <- sapply(dat[2,], as.character); names(months) <- c(); months <- months[-(1:2)]
items   <- sapply(dat[,1], as.character); names(items) <- c(); items <- items[-(1:2)]
years   <- dat[-c(1:2),2]
data    <- dat[-(1:2),-c(1:2)]; data <- data[!is.na(years),!is.na(months)]
data    <- as.matrix(data)
rownames(data) <- years[!is.na(years)]
colnames(data) <- months[!is.na(months)]
items   <- items[!is.na(years)]
item_borders <- cbind(which(items!=""), c((which(items!="")-1)[-1],length(items)))
regions <- regions[!is.na(months)]
regions
borders <- cbind(which(regions!=""), c((which(regions!="")-1)[-1],length(regions)))
borders
reg_data  <- lapply(1:nrow(borders), function(r) {b <- borders[r,]; data[,b[1]:b[2]]})
names(reg_data) <- regions[regions!=""]
item_borders
item_borders
items   <- lapply(1:nrow(item_borders), function(r) {b <- item_borders[r,]; items[b[1]:b[2]]})
items
dim(reg_data)
dim(reg_data[[1]])
dim(reg_data[[2]])
dim(reg_data[[3]])
item_borders
items
item_borders
reg_data[[1]]
lapply(1:nrow(item_borders), function(r) {b <- reg_data[[1]][r,]; reg_data[[1]][b[1]:b[2]]})
lapply(1:nrow(item_borders), function(r) {b <- reg_data[[1]][r,]; reg_data[[1]][b[1]:b[2],]})
reg_data
reg_data[[1]]
lapply(1:nrow(item_borders), function(r) {b <- item_borders[[1]][r,]; reg_data[[1]][b[1]:b[2],]})
item_borders <- cbind(which(items!=""), c((which(items!="")-1)[-1],length(items)))
item_borders
items   <- items[!is.na(years)]
item_borders <- cbind(which(items!=""), c((which(items!="")-1)[-1],length(items)))
item_borders
lapply(1:nrow(item_borders), function(r) {b <- item_borders[[1]][r,]; reg_data[[1]][b[1]:b[2],]})
lapply(1:nrow(item_borders), function(r) {b <- item_borders[r,]; reg_data[[1]][b[1]:b[2],]})
item_borders
[b[1]:b[2],]
b[1]
1:nrow(item_borders)
item_borders
dat <- read.csv(paste0(datafolder,datalist[1]),sep="|")
dat <- dat[-3,-1]
regions <- sapply(dat[1,], as.character); names(regions) <- c(); regions <- regions[-(1:2)]
months  <- sapply(dat[2,], as.character); names(months) <- c(); months <- months[-(1:2)]
items   <- sapply(dat[,1], as.character); names(items) <- c(); items <- items[-(1:2)]
years   <- dat[-c(1:2),2]
data    <- dat[-(1:2),-c(1:2)]; data <- data[!is.na(years),!is.na(months)]
data    <- as.matrix(data)
rownames(data) <- years[!is.na(years)]
colnames(data) <- months[!is.na(months)]
items   <- items[!is.na(years)]
item_borders <- cbind(which(items!=""), c((which(items!="")-1)[-1],length(items)))
item_borders
regions <- regions[!is.na(months)]
borders <- cbind(which(regions!=""), c((which(regions!="")-1)[-1],length(regions)))
reg_data  <- lapply(1:nrow(borders), function(r) {b <- borders[r,]; data[,b[1]:b[2]]})
names(reg_data) <- regions[regions!=""]
item_borders <- cbind(which(items!=""), c((which(items!="")-1)[-1],length(items)))
item_borders
lapply(1:nrow(item_borders), function(r) {b <- item_borders[r,]; reg_data[[1]][b[1]:b[2],]})
lapply(1:nrow(item_borders), function(r) {b <- item_borders[r,]; reg_data[[1]][b[1]:b[2],]})
regdat <- lapply(1:nrow(item_borders), function(r) {b <- item_borders[r,]; reg_data[[1]][b[1]:b[2],]})
regdat
regdat
colnames(regdat)
regdats <- lapply(1:nrow(item_borders), function(r) {b <- item_borders[r,]; reg_data[[1]][b[1]:b[2],]})
lapply(regdats, function(regdat) sapply(rownames(regdat), function(r) sapply(colnames(regdat), function(c) paste0(r,"-",c))))
cnames  <- lapply(regdats, function(regdat) c(sapply(rownames(regdat), function(r) sapply(colnames(regdat), function(c) paste0(r,"-",c)))))
cnames
regdats <- lapply(regdats, function(regdat) c(t(regdat)))
regdats
regdats[[1]]
cnames
length(cnames)
lapply(cnames,length)
sapply(cnames,length)
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)
sapply(cnames,length)/12
sapply(cnames,length)
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
cnames[[1]]
save(cnames[[1]],file = "dates.rda")
save(cnames,file = "dates.rda")
out
dates <- save(cnames, file = "dates.rda")
dates
dates <- cnames[[1]]
dates
regdats
install.packages("Rserve")
q()
install.packages("ggplot2")
install.packages("quanteda")
install.packages("XML")
install.packages("XML")
library("XML")
install.packages("quanteda")
install.packages("rmongo")
install.packages("RMongo")
install.packages("RMongo")
q()
if(Sys.info()["sysname"]=="Linux"){setwd("~/Documents/dmarkovCAD/")} else {setwd("~/dMarkovCAD/")}
source("lnviDSM2.R")
source("lnviDM2.R")
source("lnviDS2.R")
source("lnviD2.R")
source("twostate_DM.R")
source("twostate_DS.R")
source("twostate_D.R")
source("dlvPath.R")
source("utils.R")
dir.create("output",showWarnings = F)
dir.create("results",showWarnings = F)
dir.create("rejplots",showWarnings = F)
dir.create("pairplots",showWarnings = F)
ress_2stateDSM <- get(load(paste0("output/","CAD_quarterly_BOP_2stateDSM_ress.rda")))
ress_2stateDM  <- get(load(paste0("output/","CAD_quarterly_BOP_2stateDM_ress.rda")))
ress_2stateDS  <- get(load(paste0("output/","CAD_quarterly_BOP_2stateDS_ress.rda")))
ress_2stateD   <- get(load(paste0("output/","CAD_quarterly_BOP_2stateD_ress.rda")))
ress_2stateDSM <- totable(ress_2stateDSM)
ress_2stateDM  <- totable(ress_2stateDS)
ress_2stateDS  <- totable(ress_2stateDS)
ress_2stateD   <- totable(ress_2stateD)
ress_2stateDSM
ress_2stateDSM
ress_2stateDSM <- correctRes(ress_2stateDSM,"DSM")
ress_2stateDM  <- correctRes(ress_2stateDM,"DM")
ress_2stateDS  <- correctRes(ress_2stateDS,"DS")
ress_2stateD   <- correctRes(ress_2stateD, "D")
ress_2stateDSM
pathss_2stateDSM <- lapply(1:nrow(ress_2stateDSM), function(x) dlvPath_DSM(ress_2stateDSM[x,],processdat(dat[,x])))
pathss_2stateDM  <- lapply(1:nrow(ress_2stateDM),  function(x) dlvPath_DM(ress_2stateDM[x,],processdat(dat[,x])))
pathss_2stateDS  <- lapply(1:nrow(ress_2stateDS),  function(x) dlvPath_DS(ress_2stateDS[x,],processdat(dat[,x])))
pathss_2stateD   <- lapply(1:nrow(ress_2stateD),   function(x) dlvPath_D(ress_2stateD[x,],processdat(dat[,x])))
dat <- get(load(paste0("CAD_quarterly_BOP",".rda")))
dat <- dat/10e10
pathss_2stateDSM <- lapply(1:nrow(ress_2stateDSM), function(x) dlvPath_DSM(ress_2stateDSM[x,],processdat(dat[,x])))
pathss_2stateDM  <- lapply(1:nrow(ress_2stateDM),  function(x) dlvPath_DM(ress_2stateDM[x,],processdat(dat[,x])))
pathss_2stateDS  <- lapply(1:nrow(ress_2stateDS),  function(x) dlvPath_DS(ress_2stateDS[x,],processdat(dat[,x])))
pathss_2stateD   <- lapply(1:nrow(ress_2stateD),   function(x) dlvPath_D(ress_2stateD[x,],processdat(dat[,x])))
ischange  <- t(sapply(pathss_2stateDSM, function(p) {temp <- apply(p,1,sum) > 0; temp <- c(temp,T,T,temp,temp,T,T); return(temp)}))
parss_2stateDSM  <- ress_2stateDSM * ischange
parss_2stateDSM
colnames(parss_2stateDSM) <- c("d_1","d_2","P_11","P_22","sigma_1","sigma_2","mu_1","mu_2","Neg_lklh","Opt. Converged")
rownames(parss_2stateDSM) <- colnames(dat)
parss_2stateDSM
source('~/Documents/dmarkovCAD/utils.R')
parss_2stateDSM
rep_2stateDSM    <- report(parss_2stateDSM)
parss_2stateDSM
colnames(parss_2stateDSM)
report <- function(res,type){
# reports the statistics of the output table
ind        <- (res[,1] < res[,2]) & (res[,1]!=0 | res[,2]!=0)
if(type=="DSM"){
res[ind,] <- res[ind,c(2,1,4,3,6,5,8,7,9:ncol(res))]
} else if(type=="DM"){
res[ind,] <- res[ind,c(2,1,4,3,5,7,6,8:ncol(res))]
} else if(type=="DS"){
res[ind,] <- res[ind,c(2,1,4,3,6,5,7:ncol(res))]
} else if(type=="D"){
res[ind,] <- res[ind,c(2,1,4,3,5:ncol(res))]
} else {stop("Unknown Type")}
return(res)
nr         <- nrow(res)
noChange   <- res[(res[,1]==0) | (res[,2]==0),]
noChangeS  <- noChange[noChange[,1]<1,]
noChangeN  <- noChange[noChange[,1]>=1,]
change     <- res[(res[,1]!=0) & (res[,2]!=0),]
changeSS   <- change[change[,1] < 1 & change[,2] < 1,]
changeNN   <- change[change[,1] >= 1 & change[,2] >= 1,]
changeNS   <- change[(change[,1] >= 1 & change[,2] <= 1) | (change[,1] <= 1 & change[,2] >= 1),]
repp <- t(sapply(list(noChangeS,noChangeN,changeSS,changeNN,changeNS), function(d){
d <- matrix(d,,ncol(res))
d[d==0] <- NA
c(nrow(d)/nr, sapply(1:ncol(res), function(i) mean(d[,i],na.rm=T)))
}))
repp <- repp[c(1,2,3,5,4),]
rownames(repp) <- c("C","D","C - C","C - D","D - D")
colnames(repp) <- c("Perc.","Avg. d_1","Avg. d_2","Avg. P_11","Avg. P_22", "Avg. Sigma", "Avg. mu_1", "Avg. mu_2")[1:(ncol(res)+1)]
repp <- round(repp,3)
return(repp)
}
parss_2stateDSM
colnames(parss_2stateDSM)
report <- function(res,type){
# reports the statistics of the output table
cnames <- colnames(res)
ind        <- (res[,1] < res[,2]) & (res[,1]!=0 | res[,2]!=0)
if(type=="DSM"){
res[ind,] <- res[ind,c(2,1,4,3,6,5,8,7,9:ncol(res))]
} else if(type=="DM"){
res[ind,] <- res[ind,c(2,1,4,3,5,7,6,8:ncol(res))]
} else if(type=="DS"){
res[ind,] <- res[ind,c(2,1,4,3,6,5,7:ncol(res))]
} else if(type=="D"){
res[ind,] <- res[ind,c(2,1,4,3,5:ncol(res))]
} else {stop("Unknown Type")}
return(res)
nr         <- nrow(res)
noChange   <- res[(res[,1]==0) | (res[,2]==0),]
noChangeS  <- noChange[noChange[,1]<1,]
noChangeN  <- noChange[noChange[,1]>=1,]
change     <- res[(res[,1]!=0) & (res[,2]!=0),]
changeSS   <- change[change[,1] < 1 & change[,2] < 1,]
changeNN   <- change[change[,1] >= 1 & change[,2] >= 1,]
changeNS   <- change[(change[,1] >= 1 & change[,2] <= 1) | (change[,1] <= 1 & change[,2] >= 1),]
repp <- t(sapply(list(noChangeS,noChangeN,changeSS,changeNN,changeNS), function(d){
d <- matrix(d,,ncol(res))
d[d==0] <- NA
c(nrow(d)/nr, sapply(1:ncol(res), function(i) mean(d[,i],na.rm=T)))
}))
repp <- repp[c(1,2,3,5,4),]
rownames(repp) <- c("C","D","C - C","C - D","D - D")
colnames(repp) <- c("Perc.",cnames)[1:(ncol(res)+1)]
repp <- round(repp,3)
return(repp)
}
rep_2stateDSM    <- report(parss_2stateDSM)
rep_2stateDSM    <- report(parss_2stateDSM,"DSM")
rep_2stateDSM
parss_2stateDSM
res <- parss_2stateDSM
cnames <- colnames(res)
cnames
ind        <- (res[,1] < res[,2]) & (res[,1]!=0 | res[,2]!=0)
ind
if(type=="DSM"){
res[ind,] <- res[ind,c(2,1,4,3,6,5,8,7,9:ncol(res))]
} else if(type=="DM"){
res[ind,] <- res[ind,c(2,1,4,3,5,7,6,8:ncol(res))]
} else if(type=="DS"){
res[ind,] <- res[ind,c(2,1,4,3,6,5,7:ncol(res))]
} else if(type=="D"){
res[ind,] <- res[ind,c(2,1,4,3,5:ncol(res))]
} else {stop("Unknown Type")}
report <- function(res,type){
# reports the statistics of the output table
cnames <- colnames(res)
ind        <- (res[,1] < res[,2]) & (res[,1]!=0 | res[,2]!=0)
if(type=="DSM"){
res[ind,] <- res[ind,c(2,1,4,3,6,5,8,7,9:ncol(res))]
} else if(type=="DM"){
res[ind,] <- res[ind,c(2,1,4,3,5,7,6,8:ncol(res))]
} else if(type=="DS"){
res[ind,] <- res[ind,c(2,1,4,3,6,5,7:ncol(res))]
} else if(type=="D"){
res[ind,] <- res[ind,c(2,1,4,3,5:ncol(res))]
} else {stop("Unknown Type")}
nr         <- nrow(res)
noChange   <- res[(res[,1]==0) | (res[,2]==0),]
noChangeS  <- noChange[noChange[,1]<1,]
noChangeN  <- noChange[noChange[,1]>=1,]
change     <- res[(res[,1]!=0) & (res[,2]!=0),]
changeSS   <- change[change[,1] < 1 & change[,2] < 1,]
changeNN   <- change[change[,1] >= 1 & change[,2] >= 1,]
changeNS   <- change[(change[,1] >= 1 & change[,2] <= 1) | (change[,1] <= 1 & change[,2] >= 1),]
repp <- t(sapply(list(noChangeS,noChangeN,changeSS,changeNN,changeNS), function(d){
d <- matrix(d,,ncol(res))
d[d==0] <- NA
c(nrow(d)/nr, sapply(1:ncol(res), function(i) mean(d[,i],na.rm=T)))
}))
repp <- repp[c(1,2,3,5,4),]
rownames(repp) <- c("C","D","C - C","C - D","D - D")
colnames(repp) <- c("Perc.",cnames)[1:(ncol(res)+1)]
repp <- round(repp,3)
return(repp)
}
rep_2stateDSM    <- report(parss_2stateDSM,"DSM")
rep_2stateDSM
report <- function(res,type){
# reports the statistics of the output table
cnames <- colnames(res)
ind        <- (res[,1] < res[,2]) & (res[,1]!=0 | res[,2]!=0)
if(type=="DSM"){
res[ind,] <- res[ind,c(2,1,4,3,6,5,8,7,9:ncol(res))]
} else if(type=="DM"){
res[ind,] <- res[ind,c(2,1,4,3,5,7,6,8:ncol(res))]
} else if(type=="DS"){
res[ind,] <- res[ind,c(2,1,4,3,6,5,7:ncol(res))]
} else if(type=="D"){
res[ind,] <- res[ind,c(2,1,4,3,5:ncol(res))]
} else {stop("Unknown Type")}
nr         <- nrow(res)
noChange   <- res[(res[,1]==0) | (res[,2]==0),]
noChangeS  <- noChange[noChange[,1]<1,]
noChangeN  <- noChange[noChange[,1]>=1,]
change     <- res[(res[,1]!=0) & (res[,2]!=0),]
changeSS   <- change[change[,1] < 1 & change[,2] < 1,]
changeNN   <- change[change[,1] >= 1 & change[,2] >= 1,]
changeNS   <- change[(change[,1] >= 1 & change[,2] <= 1) | (change[,1] <= 1 & change[,2] >= 1),]
repp <- t(sapply(list(noChangeS,noChangeN,changeSS,changeNN,changeNS), function(d){
d <- matrix(d,,ncol(res))
d[d==0] <- NA
c(nrow(d)/nr, sapply(1:ncol(res), function(i) mean(d[,i],na.rm=T)))
}))
repp <- repp[c(1,2,3,5,4),]
rownames(repp) <- c("C","D","C - C","C - D","D - D")
colnames(repp) <- c("Perc.",cnames)[1:(ncol(res)+1)]
repp <- round(repp,3)
repp <- repp[,1:(ncol(repp)-2)]
return(repp)
}
rep_2stateDSM    <- report(parss_2stateDSM,"DSM")
rep_2stateDSM
rep_2stateDSM    <- report(parss_2stateDSM,"DSM")
rep_2stateDSM
rep_2stateDM    <- report(parss_2stateDM,"DM")
ischange  <- t(sapply(pathss_2stateDM, function(p) {temp <- apply(p,1,sum) > 0; temp <- c(temp,T,T,T,temp,T,T); return(temp)}))
parss_2stateDM  <- ress_2stateDM * ischange
rep_2stateDM    <- report(parss_2stateDM,"DM")
rep_2stateDM
parss_2stateDM
colnames(parss_2stateDM)
ischange  <- t(sapply(pathss_2stateDM, function(p) {temp <- apply(p,1,sum) > 0; temp <- c(temp,T,T,T,temp,T,T); return(temp)}))
parss_2stateDM  <- ress_2stateDM * ischange
colnames(parss_2stateDM) <- c("d_1","d_2","P_11","P_22","sigma","mu_1","mu_2","Neg_lklh","Opt. Converged")
rownames(parss_2stateDM) <- colnames(dat)
rep_2stateDM    <- report(parss_2stateDM,"DM")
rep_2stateDM
ischange  <- t(sapply(pathss_2stateDS, function(p) {temp <- apply(p,1,sum) > 0; temp <- c(temp,T,T,temp,T,T,T); return(temp)}))
parss_2stateDS  <- ress_2stateDS * ischange
colnames(parss_2stateDS) <- c("d_1","d_2","P_11","P_22","sigma_1","sigma_2","mu","Neg_lklh","Opt. Converged")
rownames(parss_2stateDS) <- colnames(dat)
rep_2stateDS    <- report(parss_2stateDS,"DS")
rep_2stateDS
ischange  <- t(sapply(pathss_2stateD, function(p) {temp <- apply(p,1,sum) > 0; temp <- c(temp,T,T,T,T,T,T); return(temp)}))
parss_2stateD  <- ress_2stateD * ischange
colnames(parss_2stateD) <- c("d_1","d_2","P_11","P_22","sigma","mu","Neg_lklh","Opt. Converged")
rownames(parss_2stateD) <- colnames(dat)
rep_2stateD    <- report(parss_2stateD,"D")
rep_2stateD
rep_2stateDSM
rep_2stateDM
rep_2stateDM <- cbind(rep_2stateDM[,1:6],rep(,5),rep_2stateDM[,7:8])
rep_2stateDM <- cbind(rep_2stateDM[,1:6],rep(NA,5),rep_2stateDM[,7:8])
rep_2stateDM
rep_2stateDS
rep_2stateDS <- cbind(rep_2stateDS[,1:7],rep(NA,5),rep_2stateDS[,8])
rep_2stateDS
ischange  <- t(sapply(pathss_2stateDS, function(p) {temp <- apply(p,1,sum) > 0; temp <- c(temp,T,T,temp,T,T,T); return(temp)}))
parss_2stateDS  <- ress_2stateDS * ischange
colnames(parss_2stateDS) <- c("d_1","d_2","P_11","P_22","sigma_1","sigma_2","mu","Neg_lklh","Opt. Converged")
rownames(parss_2stateDS) <- colnames(dat)
rep_2stateDS    <- report(parss_2stateDS,"DS")
rep_2stateDS <- cbind(rep_2stateDS[,1:7],rep(NA,5),rep_2stateDS[,8:8])
rep_2stateDS
rep_2stateD  <- cbind(rep_2stateD[,1:7],rep(NA,5),rep_2stateDS[,8])
ischange  <- t(sapply(pathss_2stateD, function(p) {temp <- apply(p,1,sum) > 0; temp <- c(temp,T,T,T,T,T,T); return(temp)}))
parss_2stateD  <- ress_2stateD * ischange
colnames(parss_2stateD) <- c("d_1","d_2","P_11","P_22","sigma","mu","Neg_lklh","Opt. Converged")
rownames(parss_2stateD) <- colnames(dat)
rep_2stateD    <- report(parss_2stateD,"D")
rep_2stateD
rep_2stateD  <- cbind(rep_2stateD[,1:6],rep(NA,5),rep_2stateD[,7],rep(NA,5))
rep_2stateD
do.call(rbind,list(rep_2stateDSM,rep_2stateDM,rep_2stateDS,rep_2stateD))
ischange  <- t(sapply(pathss_2stateDM, function(p) {temp <- apply(p,1,sum) > 0; temp <- c(temp,T,T,T,temp,T,T); return(temp)}))
parss_2stateDM  <- ress_2stateDM * ischange
colnames(parss_2stateDM) <- c("d_1","d_2","P_11","P_22","sigma","mu_1","mu_2","Neg_lklh","Opt. Converged")
rownames(parss_2stateDM) <- colnames(dat)
rep_2stateDM    <- report(parss_2stateDM,"DM")
ischange  <- t(sapply(pathss_2stateDS, function(p) {temp <- apply(p,1,sum) > 0; temp <- c(temp,T,T,temp,T,T,T); return(temp)}))
parss_2stateDS  <- ress_2stateDS * ischange
colnames(parss_2stateDS) <- c("d_1","d_2","P_11","P_22","sigma_1","sigma_2","mu","Neg_lklh","Opt. Converged")
rownames(parss_2stateDS) <- colnames(dat)
rep_2stateDS    <- report(parss_2stateDS,"DS")
ischange  <- t(sapply(pathss_2stateD, function(p) {temp <- apply(p,1,sum) > 0; temp <- c(temp,T,T,T,T,T,T); return(temp)}))
parss_2stateD  <- ress_2stateD * ischange
colnames(parss_2stateD) <- c("d_1","d_2","P_11","P_22","sigma","mu","Neg_lklh","Opt. Converged")
rownames(parss_2stateD) <- colnames(dat)
rep_2stateD    <- report(parss_2stateD,"D")
rep_2stateDM <- cbind(rep_2stateDM[,1:6],rep(NaN,5),rep_2stateDM[,7:8])
rep_2stateDS <- cbind(rep_2stateDS[,1:7],rep(NaN,5),rep_2stateDS[,8])
rep_2stateD  <- cbind(rep_2stateD[,1:6],rep(NaN,5),rep_2stateD[,7],rep(NaN,5))
rep_2stateDM
do.call(rbind,list(rep_2stateDSM,rep_2stateDM,rep_2stateDS,rep_2stateD))
rep_2state   <- do.call(rbind,list(rep_2stateDSM,rep_2stateDM,rep_2stateDS,rep_2stateD))
rep_2state
type_list    <- c("(d,mu,sigma)","(d,mu)","(d,sigma)","(d)")
type_list
sapply(type_list, function(typ) rep(typ,5,))
c(sapply(type_list, function(typ) rep(typ,5,)))
rep_2state   <- data.frame(c(sapply(type_list, function(typ) rep(typ,5,))),rep_2state)
c(sapply(type_list, function(typ) rep(typ,5,)))
rep_2state
rep_2state   <- data.frame(cbind(sapply(type_list, function(typ) rep(typ,5,))),rep_2state)
rep_2state
cbind(sapply(type_list, function(typ) rep(typ,5,)))
cbind(c(sapply(type_list, function(typ) rep(typ,5,))))
rep_2state   <- do.call(rbind,list(rep_2stateDSM,rep_2stateDM,rep_2stateDS,rep_2stateD))
type_list    <- c("(d,mu,sigma)","(d,mu)","(d,sigma)","(d)")
rep_2state   <- data.frame(cbind(c(sapply(type_list, function(typ) rep(typ,5,)))),rep_2state)
cbind(c(sapply(type_list, function(typ) rep(typ,5,))))
rep_2state
rep_2state   <- data.frame(cbind(c(sapply(type_list, function(typ) rep(typ,5,)))),rep_2state)
rep_2state
rep_2state   <- do.call(rbind,list(rep_2stateDSM,rep_2stateDM,rep_2stateDS,rep_2stateD))
type_list    <- c("(d,mu,sigma)","(d,mu)","(d,sigma)","(d)")
rep_2state   <- data.frame(cbind(c(sapply(type_list, function(typ) rep(typ,5,)))),rep_2state)
rep_2state
rep_2state   <- do.call(rbind,list(rep_2stateDSM,rep_2stateDM,rep_2stateDS,rep_2stateD))
type_list    <- c("(d,mu,sigma)","(d,mu)","(d,sigma)","(d)")
rep_2state   <- data.frame(rownames(rep_2state),cbind(c(sapply(type_list, function(typ) rep(typ,5,)))),rep_2state)
rep_2state
rep_2state   <- do.call(rbind,list(rep_2stateDSM,rep_2stateDM,rep_2stateDS,rep_2stateD))
type_list    <- c("(d,mu,sigma)","(d,mu)","(d,sigma)","(d)")
rep_2state   <- data.frame(cbind(c(sapply(type_list, function(typ) rep(typ,5,)))),rownames(rep_2state),rep_2state)
rep_2state
colnames(rep_2state)[1:2] <- c("Model","Conv.")
rep_2state
write.csv(rep_2state,"results/report_2state.csv")
