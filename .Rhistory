reg_data
reg_data    <- lapply(1:nrow(borders), function(r) {b <- borders[r,]; data[,b[1]:b[2]]})
names(reg_data) <- regions[regions!=""]
reg_data <- lapply(reg_data, function(r) {cnames <- colnames(r);rnames <- rownames(r)
temp <- lapply(1:ncol(r), function(c) cbind(rnames,cnames,r[,c]))})
reg_data
borders <- cbind(which(regions!=""), c((which(regions!="")-1)[-1],length(regions)))
reg_data    <- lapply(1:nrow(borders), function(r) {b <- borders[r,]; data[,b[1]:b[2]]})
reg_data
reg_data[[1]]
aa <- matrix(1:25,5)
aa
c(aa)
reg_data[[1]]
t(reg_data[[1]])
c(t(reg_data[[1]]))
t(reg_data[[1]])
colnames(reg_data)
colnames(reg_data[[1]])
sapply(rownames(reg_data[[1]], function(r) sapply(colnames(reg_data[[1]]), function(c) paste0(r,"-",c))
reg_data[[1]]
sapply(rownames(reg_data[[1]], function(r) sapply(colnames(reg_data[[1]]), function(c) paste0(r,"-",c)))
reg_data[[1]]
sapply(rownames(reg_data[[1]]), function(r) sapply(colnames(reg_data[[1]]), function(c) paste0(r,"-",c)))
reg_data[[1]]
dat <- read.csv(paste0(datafolder,datalist[1]),sep="|")
dat <- dat[-3,-1]
regions <- sapply(dat[1,], as.character); names(regions) <- c(); regions <- regions[-(1:2)]
months  <- sapply(dat[2,], as.character); names(months) <- c(); months <- months[-(1:2)]
items   <- sapply(dat[,1], as.character); names(items) <- c()
items
years   <- dat[-c(1:2),2]
data    <- dat[-(1:2),-c(1:2)]; data <- data[!is.na(years),!is.na(months)]
data    <- as.matrix(data)
data
rownames(data) <- years[!is.na(years)]
colnames(data) <- months[!is.na(months)]
data
dim(data)
length(items)
head(items)
items   <- sapply(dat[,1], as.character); names(items) <- c(); items <- items[-(1:2)]
items
length(items)
!is.na(years)
items <- items[!is.na(years)]
items
items
dim(data)
length(data)
length(items)
cbind(items,data)
items
items==""
items!=""
which(items!="")
borders <- cbind(which(items!=""), c((which(items!="")-1)[-1],length(items)))
borders
<-
items
items    <- lapply(1:nrow(borders), function(r) {b <- borders[r,]; items[b[1]:b[2]]})
items
lapply(items, function(i) rep(i[1], length(i))
cbind(items,data)
regions <- regions[!is.na(months)]
borders <- cbind(which(regions!=""), c((which(regions!="")-1)[-1],length(regions)))
reg_data    <- lapply(1:nrow(borders), function(r) {b <- borders[r,]; data[,b[1]:b[2]]})
names(reg_data) <- regions[regions!=""]
# reg_data <- lapply(reg_data, function(r) {cnames <- colnames(r);rnames <- rownames(r)
# temp <- lapply(1:ncol(r), function(c) cbind(rnames,cnames,r[,c]))})
# temp <- do.call(rbind,temp)})
c(t(reg_data[[1]]))
sapply(rownames(reg_data[[1]]), function(r) sapply(colnames(reg_data[[1]]), function(c) paste0(r,"-",c)))
reg_data[[1]]
lapply(items, function(i) rep(i[1], length(i)))
unlist(lapply(items, function(i) rep(i[1], length(i))))
items    <- unlist(lapply(items, function(i) rep(i[1], length(i))))
data     <- cbind(items,data)
data
regions <- regions[!is.na(months)]
regions
borders <- cbind(which(regions!=""), c((which(regions!="")-1)[-1],length(regions)))
borders
reg_data    <- lapply(1:nrow(borders), function(r) {b <- borders[r,]; data[,b[1]:b[2]]})
reg_data
reg_data[[1]]
data
regions
borders
reg_data
names(reg_data) <- regions[regions!=""]
reg_data
reg_data
sapply(rownames(reg_data[[1]]), function(r) sapply(colnames(reg_data[[1]]), function(c) paste0(r,"-",c)))
c(t(reg_data[[1]]))
c(t(reg_data[[1]][,-1]))
sapply(rownames(reg_data[[1]][-1]), function(r) sapply(colnames(reg_data[[1]][-1]), function(c) paste0(r,"-",c)))
colnames(reg_data[[1]])
rownames(reg_data[[1]])
sapply(rownames(reg_data[[1]]), function(r) sapply(colnames(reg_data[[1]][-1]), function(c) paste0(r,"-",c)))
sapply(rownames(reg_data[[1]]), function(r) sapply(colnames(reg_data[[1]][,-1]), function(c) paste0(r,"-",c)))
t(sapply(rownames(reg_data[[1]]), function(r) sapply(colnames(reg_data[[1]][,-1]), function(c) paste0(r,"-",c))))
c(t(sapply(rownames(reg_data[[1]]), function(r) sapply(colnames(reg_data[[1]][,-1]), function(c) paste0(r,"-",c)))))
c(sapply(rownames(reg_data[[1]]), function(r) sapply(colnames(reg_data[[1]][,-1]), function(c) paste0(r,"-",c))))
c(t(reg_data[[1]][,-1]))
c(t(reg_data[[1]][,-1]))
c(t(reg_data[[1]][,-1]))
c(t(reg_data[[1]][,-1]))
reg_data[[1]]
items
reg_data
reg_data[[1]]
reg_data[[1]]
reg_data[[1]][,1]
!duplicated(reg_data[[1]][,1])
aa <- !duplicated(reg_data[[1]][,1])
aa
which(aa)
items
dat <- read.csv(paste0(datafolder,datalist[1]),sep="|")
dat <- dat[-3,-1]
regions <- sapply(dat[1,], as.character); names(regions) <- c(); regions <- regions[-(1:2)]
months  <- sapply(dat[2,], as.character); names(months) <- c(); months <- months[-(1:2)]
items   <- sapply(dat[,1], as.character); names(items) <- c(); items <- items[-(1:2)]
years   <- dat[-c(1:2),2]
data    <- dat[-(1:2),-c(1:2)]; data <- data[!is.na(years),!is.na(months)]
data    <- as.matrix(data)
rownames(data) <- years[!is.na(years)]
colnames(data) <- months[!is.na(months)]
items   <- items[!is.na(years)]
item_borders <- cbind(which(items!=""), c((which(items!="")-1)[-1],length(items)))
item_borders
items   <- lapply(1:nrow(item_borders), function(r) {b <- borders[r,]; items[b[1]:b[2]]})
items   <- unlist(lapply(items, function(i) rep(i[1], length(i))))
data    <- cbind(items,data)
dat <- read.csv(paste0(datafolder,datalist[1]),sep="|")
dat <- dat[-3,-1]
regions <- sapply(dat[1,], as.character); names(regions) <- c(); regions <- regions[-(1:2)]
months  <- sapply(dat[2,], as.character); names(months) <- c(); months <- months[-(1:2)]
items   <- sapply(dat[,1], as.character); names(items) <- c(); items <- items[-(1:2)]
years   <- dat[-c(1:2),2]
data    <- dat[-(1:2),-c(1:2)]; data <- data[!is.na(years),!is.na(months)]
data    <- as.matrix(data)
rownames(data) <- years[!is.na(years)]
colnames(data) <- months[!is.na(months)]
items   <- items[!is.na(years)]
item_borders <- cbind(which(items!=""), c((which(items!="")-1)[-1],length(items)))
items   <- lapply(1:nrow(item_borders), function(r) {b <- item_borders[r,]; items[b[1]:b[2]]})
items   <- unlist(lapply(items, function(i) rep(i[1], length(i))))
data    <- cbind(items,data)
data
regions <- regions[!is.na(months)]
borders <- cbind(which(regions!=""), c((which(regions!="")-1)[-1],length(regions)))
reg_data  <- lapply(1:nrow(borders), function(r) {b <- borders[r,]; data[,b[1]:b[2]]})
names(reg_data) <- regions[regions!=""]
dat <- read.csv(paste0(datafolder,datalist[1]),sep="|")
dat <- dat[-3,-1]
regions <- sapply(dat[1,], as.character); names(regions) <- c(); regions <- regions[-(1:2)]
months  <- sapply(dat[2,], as.character); names(months) <- c(); months <- months[-(1:2)]
items   <- sapply(dat[,1], as.character); names(items) <- c(); items <- items[-(1:2)]
years   <- dat[-c(1:2),2]
data    <- dat[-(1:2),-c(1:2)]; data <- data[!is.na(years),!is.na(months)]
data    <- as.matrix(data)
rownames(data) <- years[!is.na(years)]
colnames(data) <- months[!is.na(months)]
items   <- items[!is.na(years)]
item_borders <- cbind(which(items!=""), c((which(items!="")-1)[-1],length(items)))
regions <- regions[!is.na(months)]
regions
borders <- cbind(which(regions!=""), c((which(regions!="")-1)[-1],length(regions)))
borders
reg_data  <- lapply(1:nrow(borders), function(r) {b <- borders[r,]; data[,b[1]:b[2]]})
names(reg_data) <- regions[regions!=""]
item_borders
item_borders
items   <- lapply(1:nrow(item_borders), function(r) {b <- item_borders[r,]; items[b[1]:b[2]]})
items
dim(reg_data)
dim(reg_data[[1]])
dim(reg_data[[2]])
dim(reg_data[[3]])
item_borders
items
item_borders
reg_data[[1]]
lapply(1:nrow(item_borders), function(r) {b <- reg_data[[1]][r,]; reg_data[[1]][b[1]:b[2]]})
lapply(1:nrow(item_borders), function(r) {b <- reg_data[[1]][r,]; reg_data[[1]][b[1]:b[2],]})
reg_data
reg_data[[1]]
lapply(1:nrow(item_borders), function(r) {b <- item_borders[[1]][r,]; reg_data[[1]][b[1]:b[2],]})
item_borders <- cbind(which(items!=""), c((which(items!="")-1)[-1],length(items)))
item_borders
items   <- items[!is.na(years)]
item_borders <- cbind(which(items!=""), c((which(items!="")-1)[-1],length(items)))
item_borders
lapply(1:nrow(item_borders), function(r) {b <- item_borders[[1]][r,]; reg_data[[1]][b[1]:b[2],]})
lapply(1:nrow(item_borders), function(r) {b <- item_borders[r,]; reg_data[[1]][b[1]:b[2],]})
item_borders
[b[1]:b[2],]
b[1]
1:nrow(item_borders)
item_borders
dat <- read.csv(paste0(datafolder,datalist[1]),sep="|")
dat <- dat[-3,-1]
regions <- sapply(dat[1,], as.character); names(regions) <- c(); regions <- regions[-(1:2)]
months  <- sapply(dat[2,], as.character); names(months) <- c(); months <- months[-(1:2)]
items   <- sapply(dat[,1], as.character); names(items) <- c(); items <- items[-(1:2)]
years   <- dat[-c(1:2),2]
data    <- dat[-(1:2),-c(1:2)]; data <- data[!is.na(years),!is.na(months)]
data    <- as.matrix(data)
rownames(data) <- years[!is.na(years)]
colnames(data) <- months[!is.na(months)]
items   <- items[!is.na(years)]
item_borders <- cbind(which(items!=""), c((which(items!="")-1)[-1],length(items)))
item_borders
regions <- regions[!is.na(months)]
borders <- cbind(which(regions!=""), c((which(regions!="")-1)[-1],length(regions)))
reg_data  <- lapply(1:nrow(borders), function(r) {b <- borders[r,]; data[,b[1]:b[2]]})
names(reg_data) <- regions[regions!=""]
item_borders <- cbind(which(items!=""), c((which(items!="")-1)[-1],length(items)))
item_borders
lapply(1:nrow(item_borders), function(r) {b <- item_borders[r,]; reg_data[[1]][b[1]:b[2],]})
lapply(1:nrow(item_borders), function(r) {b <- item_borders[r,]; reg_data[[1]][b[1]:b[2],]})
regdat <- lapply(1:nrow(item_borders), function(r) {b <- item_borders[r,]; reg_data[[1]][b[1]:b[2],]})
regdat
regdat
colnames(regdat)
regdats <- lapply(1:nrow(item_borders), function(r) {b <- item_borders[r,]; reg_data[[1]][b[1]:b[2],]})
lapply(regdats, function(regdat) sapply(rownames(regdat), function(r) sapply(colnames(regdat), function(c) paste0(r,"-",c))))
cnames  <- lapply(regdats, function(regdat) c(sapply(rownames(regdat), function(r) sapply(colnames(regdat), function(c) paste0(r,"-",c)))))
cnames
regdats <- lapply(regdats, function(regdat) c(t(regdat)))
regdats
regdats[[1]]
cnames
length(cnames)
lapply(cnames,length)
sapply(cnames,length)
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)
sapply(cnames,length)/12
sapply(cnames,length)
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
sapply(cnames,length)/12
cnames[[1]]
save(cnames[[1]],file = "dates.rda")
save(cnames,file = "dates.rda")
out
dates <- save(cnames, file = "dates.rda")
dates
dates <- cnames[[1]]
dates
regdats
install.packages("Rserve")
q()
install.packages("ggplot2")
install.packages("quanteda")
install.packages("XML")
install.packages("XML")
library("XML")
install.packages("quanteda")
install.packages("rmongo")
install.packages("RMongo")
install.packages("RMongo")
q()
plot_specific2state <- function(serind){
sername <- colnames(dat)[serind]
serDSM     <- dsDSM[,serind]; maintext1 <- paste0(sername, " Quarterly, CAD, (d,mu,sigma) sw.")
serDM      <- dsDM[,serind];  maintext2 <- paste0(sername, " Quarterly, CAD, (d,mu) sw.")
serDS      <- dsDS[,serind];  maintext3 <- paste0(sername, " Quarterly, CAD, (d,sigma) sw.")
serD       <- dsD[,serind];   maintext4 <- paste0(sername, " Quarterly, CAD, d sw.")
temp    <- data.frame(Quarter=tlabels,d = serDSM)
temp    <- temp[!is.na(temp$d),]
anglopt <- ifelse(nrow(temp) > 150,45,0)
themeopt <- theme(plot.title = element_text(size=8),
axis.title = element_text(size=8),
axis.text = element_text(size=6),
axis.text.x = element_text(angle=anglopt))
p <- ggplot(temp, aes(x = Quarter, y = d,group=1))
p <- p + geom_line() + scale_x_discrete("Quarter", breaks=temp$Quarter[seq(1,length(temp$Quarter),20)])
p1 <- p + ggtitle(maintext1) + themeopt
temp    <- data.frame(Quarter=tlabels,d = serDM)
temp    <- temp[!is.na(temp$d),]
p <- ggplot(temp, aes(x = Quarter, y = d,group=1))
p <- p + geom_line() + scale_x_discrete("Quarter", breaks=temp$Quarter[seq(1,length(temp$Quarter),20)])
p2 <- p + ggtitle(maintext2) + ggtitle(maintext1) + themeopt
temp    <- data.frame(Quarter=tlabels,d = serDS)
temp    <- temp[!is.na(temp$d),]
p <- ggplot(temp, aes(x = Quarter, y = d,group=1))
p <- p + geom_line() + scale_x_discrete("Quarter", breaks=temp$Quarter[seq(1,length(temp$Quarter),20)])
p3 <- p + ggtitle(maintext3) + ggtitle(maintext1) + themeopt
temp    <- data.frame(Quarter=tlabels,d = serD)
temp    <- temp[!is.na(temp$d),]
p <- ggplot(temp, aes(x = Quarter, y = d,group=1))
p <- p + geom_line() + scale_x_discrete("Quarter", breaks=temp$Quarter[seq(1,length(temp$Quarter),20)])
p4 <- p + ggtitle(maintext4) + ggtitle(maintext1) + themeopt
ggsave(paste0("pairplots/","CAD_Q","_",sername,"_twostate.jpg"),arrangeGrob(p1,p2,p3,p4))
}
lapply(1:74, plot_specific2state)
library("ggplot2")
# Reading outputs
ress_2stateDSM <- get(load(paste0("output/","CAD_quarterly_BOP_2stateDSM_ress.rda")))
ress_2stateDM  <- get(load(paste0("output/","CAD_quarterly_BOP_2stateDM_ress.rda")))
ress_2stateDS  <- get(load(paste0("output/","CAD_quarterly_BOP_2stateDS_ress.rda")))
ress_2stateD   <- get(load(paste0("output/","CAD_quarterly_BOP_2stateD_ress.rda")))
ress_3state    <- get(load(paste0("output/","CAD_quarterly_BOP_ress.rda")))
# Converting to tables
ress_2stateDSM <- totable(ress_2stateDSM)
ress_2stateDM <- totable(ress_2stateDM)
ress_2stateDS <- totable(ress_2stateDS)
ress_2stateD  <- totable(ress_2stateD)
ress_3state   <- totable(ress_3state)
# Reformating results
ress_2stateDSM <- correctRes(ress_2stateDSM,"DSM")
ress_2stateDM  <- correctRes(ress_2stateDM,"DM")
ress_2stateDS  <- correctRes(ress_2stateDS,"DS")
ress_2stateD   <- correctRes(ress_2stateD,"D")
dat <- get(load(paste0("CAD_quarterly_BOP",".rda")))
dat <- dat/10e10
# State switching series for dm and d
pathss_2stateDSM <- lapply(1:nrow(ress_2stateDM), function(x) dlvPath_DM(ress_2stateDM[x,],processdat(dat[,x])))
pathss_2stateDS  <- lapply(1:nrow(ress_2stateDS), function(x) dlvPath_DS(ress_2stateDS[x,],processdat(dat[,x])))
pathss_2stateD   <- lapply(1:nrow(ress_2stateD),  function(x) dlvPath_D(ress_2stateD[x,],processdat(dat[,x])))
pathss_3state    <- lapply(1:nrow(ress_3state), function(x) dlvPath_dm3(ress_3state[x,1:13],processdat(dat[,x])))
if(Sys.info()["sysname"]=="Linux"){setwd("~/Documents/dmarkovCAD/")} else {setwd("~/dMarkovCAD/")}
source("lnviDSM2.R")
source("lnviDM2.R")
source("lnviDS2.R")
source("lnviD2.R")
source("twostate_DM.R")
source("twostate_DS.R")
source("twostate_D.R")
source("dlvPath.R")
source("utils.R")
library("ggplot2")
ress_2stateDSM <- get(load(paste0("output/","CAD_quarterly_BOP_2stateDSM_ress.rda")))
ress_2stateDM  <- get(load(paste0("output/","CAD_quarterly_BOP_2stateDM_ress.rda")))
ress_2stateDS  <- get(load(paste0("output/","CAD_quarterly_BOP_2stateDS_ress.rda")))
ress_2stateD   <- get(load(paste0("output/","CAD_quarterly_BOP_2stateD_ress.rda")))
ress_3state    <- get(load(paste0("output/","CAD_quarterly_BOP_ress.rda")))
# Converting to tables
ress_2stateDSM <- totable(ress_2stateDSM)
ress_2stateDM <- totable(ress_2stateDM)
ress_2stateDS <- totable(ress_2stateDS)
ress_2stateD  <- totable(ress_2stateD)
ress_3state   <- totable(ress_3state)
# Reformating results
ress_2stateDSM <- correctRes(ress_2stateDSM,"DSM")
ress_2stateDM  <- correctRes(ress_2stateDM,"DM")
ress_2stateDS  <- correctRes(ress_2stateDS,"DS")
ress_2stateD   <- correctRes(ress_2stateD,"D")
dat <- get(load(paste0("CAD_quarterly_BOP",".rda")))
dat <- dat/10e10
pathss_2stateDSM <- lapply(1:nrow(ress_2stateDM), function(x) dlvPath_DM(ress_2stateDM[x,],processdat(dat[,x])))
pathss_2stateDS  <- lapply(1:nrow(ress_2stateDS), function(x) dlvPath_DS(ress_2stateDS[x,],processdat(dat[,x])))
pathss_2stateD   <- lapply(1:nrow(ress_2stateD),  function(x) dlvPath_D(ress_2stateD[x,],processdat(dat[,x])))
pathss_3state    <- lapply(1:nrow(ress_3state), function(x) dlvPath_dm3(ress_3state[x,1:13],processdat(dat[,x])))
# Correcting results (Reformatting results of pairs do not change state)
ischange  <- t(sapply(pathss_2stateDM, function(p) {temp <- apply(p,1,sum) > 0; temp <- c(temp,temp,T,temp,T,T); return(temp)}))
parss_2stateDM  <- ress_2stateDM * ischange
ischange  <- t(sapply(pathss_2stateDS, function(p) {temp <- apply(p,1,sum) > 0; temp <- c(temp,temp,temp,T,T,T); return(temp)}))
parss_2stateDS  <- ress_2stateDS * ischange
ischange  <- t(sapply(pathss_2stateD, function(p) {temp <- apply(p,1,sum) > 0; temp <- c(temp,temp,T,T,T,T); return(temp)}))
parss_2stateD  <- ress_2stateD * ischange
ischange  <- t(sapply(pathss_3state, function(p) {temp <- apply(p,1,sum) > 0; temp <- c(temp,temp,temp,T,temp); return(temp)}))
parss_3state  <- ress_3state[,1:13] * ischange
ress_2stateDSM <- get(load(paste0("output/","CAD_quarterly_BOP_2stateDSM_ress.rda")))
ress_2stateDSM <- totable(ress_2stateDSM)
ress_2stateDSM <- correctRes(ress_2stateDSM,"DSM")
dat <- get(load(paste0("CAD_quarterly_BOP",".rda")))
dat <- dat/10e10
pathss_2stateDSM <- lapply(1:nrow(ress_2stateDSM), function(x) dlvPath_DSM(ress_2stateDSM[x,],processdat(dat[,x])))
parss_2stateDM
ischange  <- t(sapply(pathss_2stateDSM, function(p) {temp <- apply(p,1,sum) > 0; temp <- c(temp,temp,T,temp,T,T); return(temp)}))
parss_2stateDM  <- ress_2stateDM * ischange
parss_2stateDM
ischange  <- t(sapply(pathss_2stateDSM, function(p) {temp <- apply(p,1,sum) > 0; temp <- c(temp,temp,temp,temp,T,T); return(temp)}))
parss_2stateDM  <- ress_2stateDM * ischange
pathss_2stateDSM <- lapply(1:nrow(ress_2stateDSM), function(x) dlvPath_DSM(ress_2stateDSM[x,],processdat(dat[,x])))
ischange  <- t(sapply(pathss_2stateDSM, function(p) {temp <- apply(p,1,sum) > 0; temp <- c(temp,temp,temp,temp,T,T); return(temp)}))
parss_2stateDM  <- ress_2stateDM * ischange
parss_2stateDM  <- ress_2stateDSM * ischange
parss_2stateDM
ress_2stateDSM
ress_2stateDSM <- get(load(paste0("output/","CAD_quarterly_BOP_2stateDSM_ress.rda")))
ress_2stateDM  <- get(load(paste0("output/","CAD_quarterly_BOP_2stateDM_ress.rda")))
ress_2stateDS  <- get(load(paste0("output/","CAD_quarterly_BOP_2stateDS_ress.rda")))
ress_2stateD   <- get(load(paste0("output/","CAD_quarterly_BOP_2stateD_ress.rda")))
ress_3state    <- get(load(paste0("output/","CAD_quarterly_BOP_ress.rda")))
# Converting to tables
ress_2stateDSM <- totable(ress_2stateDSM)
ress_2stateDM <- totable(ress_2stateDM)
ress_2stateDS <- totable(ress_2stateDS)
ress_2stateD  <- totable(ress_2stateD)
ress_3state   <- totable(ress_3state)
# Reformating results
ress_2stateDSM <- correctRes(ress_2stateDSM,"DSM")
ress_2stateDM  <- correctRes(ress_2stateDM,"DM")
ress_2stateDS  <- correctRes(ress_2stateDS,"DS")
ress_2stateD   <- correctRes(ress_2stateD,"D")
dat <- get(load(paste0("CAD_quarterly_BOP",".rda")))
dat <- dat/10e10
rm(list=ls())
library("ggplot2")
ress_2stateDSM <- get(load(paste0("output/","CAD_quarterly_BOP_2stateDSM_ress.rda")))
ress_2stateDM  <- get(load(paste0("output/","CAD_quarterly_BOP_2stateDM_ress.rda")))
ress_2stateDS  <- get(load(paste0("output/","CAD_quarterly_BOP_2stateDS_ress.rda")))
ress_2stateD   <- get(load(paste0("output/","CAD_quarterly_BOP_2stateD_ress.rda")))
ress_3state    <- get(load(paste0("output/","CAD_quarterly_BOP_ress.rda")))
ress_2stateDSM <- totable(ress_2stateDSM)
ress_2stateDM <- totable(ress_2stateDM)
ress_2stateDS <- totable(ress_2stateDS)
ress_2stateD  <- totable(ress_2stateD)
ress_3state   <- totable(ress_3state)
ress_2stateDSM <- correctRes(ress_2stateDSM,"DSM")
source("lnviDSM2.R")
source("lnviDM2.R")
source("lnviDS2.R")
source("lnviD2.R")
source("twostate_DM.R")
source("twostate_DS.R")
source("twostate_D.R")
source("dlvPath.R")
source("utils.R")
library("ggplot2")
# Reading outputs
ress_2stateDSM <- get(load(paste0("output/","CAD_quarterly_BOP_2stateDSM_ress.rda")))
ress_2stateDM  <- get(load(paste0("output/","CAD_quarterly_BOP_2stateDM_ress.rda")))
ress_2stateDS  <- get(load(paste0("output/","CAD_quarterly_BOP_2stateDS_ress.rda")))
ress_2stateD   <- get(load(paste0("output/","CAD_quarterly_BOP_2stateD_ress.rda")))
ress_3state    <- get(load(paste0("output/","CAD_quarterly_BOP_ress.rda")))
# Converting to tables
ress_2stateDSM <- totable(ress_2stateDSM)
ress_2stateDM <- totable(ress_2stateDM)
ress_2stateDS <- totable(ress_2stateDS)
ress_2stateD  <- totable(ress_2stateD)
ress_3state   <- totable(ress_3state)
# Reformating results
ress_2stateDSM <- correctRes(ress_2stateDSM,"DSM")
ress_2stateDM  <- correctRes(ress_2stateDM,"DM")
ress_2stateDS  <- correctRes(ress_2stateDS,"DS")
ress_2stateD   <- correctRes(ress_2stateD,"D")
dat <- get(load(paste0("CAD_quarterly_BOP",".rda")))
dat <- dat/10e10
dsDSM <- lapply(1:nrow(ress_2stateDSM), function(x) {matrix(ress_2stateDSM[x,1:2],1) %*% dlvPath_DSM(ress_2stateDSM[x,1:8],processdat(dat[,x]))})
dsDM  <- lapply(1:nrow(ress_2stateDM),  function(x) {matrix(ress_2stateDM[x,1:2],1)  %*% dlvPath_DM(ress_2stateDM[x,1:7],processdat(dat[,x]))})
dsDS  <- lapply(1:nrow(ress_2stateDS),  function(x) {matrix(ress_2stateDS[x,1:2],1)  %*% dlvPath_DS(ress_2stateDS[x,1:7],processdat(dat[,x]))})
dsD   <- lapply(1:nrow(ress_2stateD),   function(x) {matrix(ress_2stateD[x,1:2],1)   %*% dlvPath_D(ress_2stateD[x,1:6],  processdat(dat[,x]))})
dsD
dsDSM
dsDSM <- sapply(1:ncol(dat), function(i) deprocessds(dsDSM[[i]],dat[,i]))
dsDM  <- sapply(1:ncol(dat), function(i) deprocessds(dsDM[[i]],dat[,i]))
dsDS  <- sapply(1:ncol(dat), function(i) deprocessds(dsDS[[i]],dat[,i]))
dsD   <- sapply(1:ncol(dat), function(i) deprocessds(dsD[[i]],dat[,i]))
ds3   <- sapply(1:ncol(dat), function(i) deprocessds(ds3[[i]],dat[,i]))
tlabels <- unlist(lapply(1950:2018, function(y) paste0(y,c("Q1","Q2","Q3","Q4"))))
tlabels <- tlabels[1:nrow(dat)]
plot_specific2state <- function(serind){
sername <- colnames(dat)[serind]
serDSM     <- dsDSM[,serind]; maintext1 <- paste0(sername, " Quarterly, CAD, (d,mu,sigma) sw.")
serDM      <- dsDM[,serind];  maintext2 <- paste0(sername, " Quarterly, CAD, (d,mu) sw.")
serDS      <- dsDS[,serind];  maintext3 <- paste0(sername, " Quarterly, CAD, (d,sigma) sw.")
serD       <- dsD[,serind];   maintext4 <- paste0(sername, " Quarterly, CAD, d sw.")
temp    <- data.frame(Quarter=tlabels,d = serDSM)
temp    <- temp[!is.na(temp$d),]
anglopt <- ifelse(nrow(temp) > 150,45,0)
themeopt <- theme(plot.title = element_text(size=8),
axis.title = element_text(size=8),
axis.text = element_text(size=6),
axis.text.x = element_text(angle=anglopt))
p <- ggplot(temp, aes(x = Quarter, y = d,group=1))
p <- p + geom_line() + scale_x_discrete("Quarter", breaks=temp$Quarter[seq(1,length(temp$Quarter),20)])
p1 <- p + ggtitle(maintext1) + themeopt
temp    <- data.frame(Quarter=tlabels,d = serDM)
temp    <- temp[!is.na(temp$d),]
p <- ggplot(temp, aes(x = Quarter, y = d,group=1))
p <- p + geom_line() + scale_x_discrete("Quarter", breaks=temp$Quarter[seq(1,length(temp$Quarter),20)])
p2 <- p + ggtitle(maintext2) + ggtitle(maintext1) + themeopt
temp    <- data.frame(Quarter=tlabels,d = serDS)
temp    <- temp[!is.na(temp$d),]
p <- ggplot(temp, aes(x = Quarter, y = d,group=1))
p <- p + geom_line() + scale_x_discrete("Quarter", breaks=temp$Quarter[seq(1,length(temp$Quarter),20)])
p3 <- p + ggtitle(maintext3) + ggtitle(maintext1) + themeopt
temp    <- data.frame(Quarter=tlabels,d = serD)
temp    <- temp[!is.na(temp$d),]
p <- ggplot(temp, aes(x = Quarter, y = d,group=1))
p <- p + geom_line() + scale_x_discrete("Quarter", breaks=temp$Quarter[seq(1,length(temp$Quarter),20)])
p4 <- p + ggtitle(maintext4) + ggtitle(maintext1) + themeopt
ggsave(paste0("pairplots/","CAD_Q","_",sername,"_twostate.jpg"),arrangeGrob(p1,p2,p3,p4))
}
lapply(1:74, plot_specific2state)
library("gridExtra")
lapply(1:74, plot_specific2state)
library("ggplot2","gridExtra")
