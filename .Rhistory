setwd("..")
q()
setwd("~/TwoStateMS/")
source("convDLV.R")
source("utils.R")
source("dlvPath.R")
q()
load("~/twostateMD_old/twostate/results/d_1930_res1.rda")
res1
head(res1)
res1[[1]]$par
res1[[2]]$par
res1[[4]]$par
res1[[3]]$par
res1[[4]]$par
n <- 20
N_rep <- 10000
sigma0 <- 1.5
# Generating 10000 replication data (DGP)
z <- matrix(1 + rnorm(n*N_rep,sd = sigma0^2),n,N_rep)
x <- 2 + .5 * z + rnorm(n*N_rep,sd = sigma0^2)
y <- 1 + 2 * x + rnorm(n*N_rep,sd = sigma0^2)
# Function for single replication
calc_beta <- function(xser,yser){
# Linear Model
fit   <- lm(y~x)
beta2 <- coef(fit)[2]
se_beta <- sqrt(sd(x)/sum(x^2))
c(beta2,se_beta)
}
# Linear Model
fit   <- lm(y~x)
# Linear Model
fit   <- lm(yser~xser)
xser <- x[,1]
yser <- y[,1]
# Linear Model
fit   <- lm(yser~xser)
fit
fit$residuals
sum(fit$residuals^2)
# Linear Model
fit   <- lm(yser~xser)
beta2 <- coef(fit)[2]
beta2
RSS   <- sum(fit$residuals^2)
RSS
s_sqr <- RSS/(n-1)
s_sqr
se_beta <- s_sqr/sum(xser^2)
se_beta
beta2
# Linear Model
fit   <- lm(yser~xser)
beta2 <- coef(fit)[2]
RSS   <- sum(fit$residuals^2)
s_sqr <- RSS/(n-1)
se_beta <- s_sqr/sum(xser^2)
c(beta2,se_beta)
# Function for single replication
calc_beta <- function(xser,yser){
# Linear Model
fit   <- lm(yser~xser)
beta2 <- coef(fit)[2]
RSS   <- sum(fit$residuals^2)
s_sqr <- RSS/(n-1)
se_beta <- s_sqr/sum(xser^2)
c(beta2,se_beta)
}
betas <- sapply(1:N_rep, function(i) calc_beta(x[,i],y[,i]))
betas
(betas[1,]-2)/betas[2,]
(betas[1,]-2)/betas[2,]>2
mean((betas[1,]-2)/betas[2,]>2)
summary(fit)
mean((betas[1,]-2)/betas[2,]>2)
?lm
se_beta <- sqrt(s_sqr/sum(xser^2))
se_beta
c(beta2,se_beta)
# Function for single replication
calc_beta <- function(xser,yser){
# Linear Model
fit   <- lm(yser~xser)
beta2 <- coef(fit)[2]
RSS   <- sum(fit$residuals^2)
s_sqr <- RSS/(n-1)
se_beta <- sqrt(s_sqr/sum(xser^2))
c(beta2,se_beta)
}
betas <- sapply(1:N_rep, function(i) calc_beta(x[,i],y[,i]))
mean((betas[1,]-2)/betas[2,]>2)
mean((betas[1,]-2)/betas[2,]>2.09)
rej_1 <- mean(tval1>2.09)
# Answer 1
tval1 <- (betas[1,]-2)/betas[2,]
rej_1 <- mean(tval1>2.09)
rej_1
tval2 <- (betas[1,]-0)/betas[2,]
rej_2 <- mean(tval2>2.09)
rej_2
indeps
a
source('~/CAD/dlvPath.R')
setwd("CAD/dMarkovCAD/")
source("lnviDM2.R")
dir.create("output",showWarnings = F)
dir.create("results",showWarnings = F)
dir.create("rejplots",showWarnings = F)
dir.create("pairplots",showWarnings = F)
# Reading outputs
ress_2state  <- get(load(paste0("output/","CAD_quarterly_BOP.rda")))
# Reading outputs
ress_2state  <- get(load(paste0("output/","CAD_quarterly_BOP_2state_ress.rda")))
ress_2state
source('~/CAD/dMarkovCAD/utils.R')
# Converting to tables
ress_2state <- lapply(ress_2state, totable)
ress_2state[[1]]$par
ress_2state[[1]]$convergence
totable <- function(res){
cat("OK","\n");t(sapply(res, function(r) c(r$par,r$value,r$convergence)))
}
# Converting to tables
ress_2state <- lapply(ress_2state, totable)
# Converting to tables
ress_2state <- totable(ress_2state)
ress_2state
totable <- function(res){
t(sapply(res, function(r) c(r$par,r$value,r$convergence)))
}
dim(ress_2state)
# Converting to tables
ress_2state <- totable(ress_2state)[,-9]
# Reading outputs
ress_2state  <- get(load(paste0("output/","CAD_quarterly_BOP_2state_ress.rda")))
# Converting to tables
ress_2state <- totable(ress_2state)[,-9]
ress_2state
# Reformating results
ress_2state  <- correctRes(ress_2state[,1:7])
ress_2state
# data names and pair panels
# dnames     <- gsub("d_|_D_resALL.rda","",dir("output","_D_.*resALL.rda"))
dat      <- get(load("CAD_quarterly_BOP.rda"))
# State switching series for dm and d
pathss_2state <- lapply(1:nrow(ress_2state), function(x) dlvPath_dm(ress_dm[[i]][x,-8],dat[,x]))
source('~/CAD/dlvPath.R')
# State switching series for dm and d
pathss_2state <- lapply(1:nrow(ress_2state), function(x) dlvPath_dm(ress_dm[[i]][x,-8],dat[,x]))
dat
source('~/CAD/dMarkovCAD/utils.R')
dat <- get(load(paste0("CAD_quarterly_BOP",".rda")))
dat <- dat/10e10
# State switching series for dm and d
pathss_2state <- lapply(1:nrow(ress_2state), function(x) dlvPath_dm(ress_2state[x,-8],processdat(dat[,x])))
pathss_2state
ress_2state
1:nrow(ress_2state)
dim(ress_2state)
dat
dim(dat)
# State switching series for dm and d
pathss_2state <- lapply(1:nrow(ress_2state), function(x) dlvPath_dm(ress_2state[x,],processdat(dat[,x])))
# Correcting results (Reformatting results of pairs do not change state)
ischange  <- lapply(pathss_2state, function(paths) t(sapply(paths, function(p) {temp <- apply(p,1,sum) > 0; temp <- c(temp,temp,T,temp); return(temp)})))
# Correcting results (Reformatting results of pairs do not change state)
ischange  <- t(sapply(pathss_2state, function(p) {temp <- apply(p,1,sum) > 0; temp <- c(temp,temp,T,temp); return(temp)})
# Correcting results (Reformatting results of pairs do not change state)
ischange  <- t(sapply(pathss_2state, function(p) {temp <- apply(p,1,sum) > 0; temp <- c(temp,temp,T,temp); return(temp)}))
# Correcting results (Reformatting results of pairs do not change state)
ischange  <- t(sapply(pathss_2state, function(p) {temp <- apply(p,1,sum) > 0; temp <- c(temp,temp,T,temp); return(temp)}))
ischange
ress_2state
parss_2state  <- ress_2state[,-8] * ischange
parss_2state
parss_2state
colnames(parss_2state) <- c("d_1","d_2","P_11","P_22","P_33","sigma","mu_1","mu_2")
parss_2state
colnames(parss_2state) <- c("d_1","d_2","P_11","P_22","sigma","mu_1","mu_2")
parss_2state
head(parss_2state)
write.csv(parss_2state, "CAD_quarterly_BOP_2state_results.csv")
# d estimations vs year for each pair
ds  <- sapply(1:nrow(ress_2state), function(x) {matrix(ress_2state[x,1:2],1,) %*% dlvPath_dm(ress_2state[x,1:7],dat[,x])})
1:nrow(ress_2state)
ress_2state[x,1:2]
ress_2state[1,1:2]
# d estimations vs year for each pair
ds  <- sapply(1:nrow(ress_2state), function(x) {matrix(ress_2state[x,1:2],1,) %*% dlvPath_dm(ress_2state[x,1:7],dat[,x])})
# d estimations vs year for each pair
ds  <- sapply(1:nrow(ress_2state), function(x) {matrix(ress_2state[x,1:2],1,) %*% dlvPath_dm(ress_2state[x,1:7],processdat(dat[,x]))})
# proportions of d < 1 at each time point
d_plots <- apply(ds<1,1,mean)
ds
# d estimations vs year for each pair
ds  <- lapply(1:nrow(ress_2state), function(x) {matrix(ress_2state[x,1:2],1,) %*% dlvPath_dm(ress_2state[x,1:7],processdat(dat[,x]))})
# proportions of d < 1 at each time point
d_plots <- sapply(ds<1,1,mean)
# proportions of d < 1 at each time point
d_plots <- sapply(ds<1,mean)
ds
ds[[1]]
ds[[1]]<1
mean(ds[[1]]<1)
# proportions of d < 1 at each time point
d_plots <- sapply(ds, function(d) mean(d<1))
d_plots
ds[[1]]
sapply(ds,length)
ds
head(dat)
tail(dat)
deprocessds <- function(ds,ser){
datrange <- range(which(!is.na(ser)))
temp     <- rep(NA,length(ser))
if((datrange[2]-datrange[1]) != length(ds)){warning("there seems a problem")}
temp[datrange[1]:datrange[2]] <- ds
temp
}
ds[[1]]
length(ds)
deprocessds <- function(ds,ser){
datrange <- range(which(!is.na(ser)))
temp     <- rep(NA,length(ser))
if((datrange[2]-datrange[1]) != length(ds)){warning("there seems a problem")}
temp[datrange[1]:datrange[2]] <- ds
temp
}
# Standardizing the length of ds
deprocessds(ds[[1]],dat[,1])
d <- ds[[1]]
d
ser <- dat[,1]
datrange <- range(which(!is.na(ser)))
datrange
temp     <- rep(NA,length(ser))
temp
if((datrange[2]-datrange[1]) != length(d)){warning("there seems a problem")}
temp[datrange[1]:datrange[2]] <- d
temp     <- rep(NA,length(ser))
datrange[2]-datrange[1])
(datrange[2]-datrange[1])
length(d)
deprocessds <- function(d,ser){
datrange <- range(which(!is.na(ser)))
temp     <- rep(NA,length(ser))
if((datrange[2]-datrange[1]+1) != length(d)){warning("there seems a problem")}
temp[datrange[1]:datrange[2]] <- d
temp
}
# Standardizing the length of ds
deprocessds(ds[[1]],dat[,1])
# Standardizing the length of ds
sapply(1:ncol(dat), function(i) deprocessds(ds[[i]],dat[,i]))
# Standardizing the length of ds
ds  <- sapply(1:ncol(dat), function(i) deprocessds(ds[[i]],dat[,i]))
ds
ds<1
# proportions of d < 1 at each time point
d_plots <- apply(ds<1, 1, function(d) mean(d<1,na.rm=T))
d_plots
plot(d_plots)
plot(head(d_plots,-1))
plot(head(d_plots,-1)[-1:100])
plot(head(d_plots,-1)[-(1:100)])
tlabels <- sapply(1950:2018,paste0(y,c("Q1","Q2","Q3","Q4")))
tlabels <- sapply(1950:2018, function(y) paste0(y,c("Q1","Q2","Q3","Q4")))
tlabels
tlabels <- unlist(lapply(1950:2018, function(y) paste0(y,c("Q1","Q2","Q3","Q4"))))
tlabels
tlabels <- tlabels[1:nrow(dat)]
tlabels
serind <- 1
sername <- colnames(dat)[serind]
sername
ser      <- ds[,serind]; maintext <- paste0(sername, " Quarterly, CAD")
ser
plot(ser)
plot(ser,type="l")
temp <- data.frame(Quarter=tlabels,d = ser)
temp
p5 <- ggplot(temp, aes(x = Quarter, y = d))
library("ggplot2")
p5 <- ggplot(temp, aes(x = Quarter, y = d))
p5
p <- ggplot(temp, aes(x = Quarter, y = d))
p + geom_line()
p + geom_line(aes(color=d))
d
p + geom_line()
p <- ggplot(temp, aes(x = Quarter, y = d,group=1))
p + geom_line()
temp <- temp[!is.na(d),]
p <- ggplot(temp, aes(x = Quarter, y = d,group=1))
p + geom_line()
!is.na(d)
temp <- data.frame(Quarter=tlabels,d = ser)
temp <- temp[!is.na(temp$d),]
temp
p <- ggplot(temp, aes(x = Quarter, y = d,group=1))
p + geom_line()
p <- ggplot(temp, aes(x = Quarter, y = d,group=1))
p + geom_line() + scale_x_discrete("Quarter", breaks=Quarter[seq(1,length(Quarter),12)])
p + geom_line() + scale_x_discrete("Quarter", breaks=temp$Quarter[seq(1,length(temp$Quarter),12)])
p <- ggplot(temp, aes(x = Quarter, y = d,group=1))
p <- p + geom_line() + scale_x_discrete("Quarter", breaks=temp$Quarter[seq(1,length(temp$Quarter),12)])
p + ggtitle(maintext)
# Code for plotting d estimations vs year of given pair for given dataset
plot_specific <- function(serind){
sername <- colnames(dat)[serind]
ser      <- ds[,serind]; maintext <- paste0(sername, " Quarterly, CAD")
temp <- data.frame(Quarter=tlabels,d = ser)
temp <- temp[!is.na(temp$d),]
jpeg(paste0("pairplots/","CAD_Q","_",sername,"_twostate.jpg"))
p <- ggplot(temp, aes(x = Quarter, y = d,group=1))
p <- p + geom_line() + scale_x_discrete("Quarter", breaks=temp$Quarter[seq(1,length(temp$Quarter),12)])
p + ggtitle(maintext)
dev.off()
temp <- data.frame(Quarter=tlabels,d = ser)
temp <- temp[!is.na(temp$d),]
p <- ggplot(temp, aes(x = Quarter, y = d,group=1))
p <- p + geom_line() + scale_x_discrete("Quarter", breaks=temp$Quarter[seq(1,length(temp$Quarter),12)])
p + ggtitle(maintext)
}
lapply(1:74, plot_specific)
# Code for plotting d estimations vs year of given pair for given dataset
plot_specific <- function(serind){
sername <- colnames(dat)[serind]
ser      <- ds[,serind]; maintext <- paste0(sername, " Quarterly, CAD")
temp <- data.frame(Quarter=tlabels,d = ser)
temp <- temp[!is.na(temp$d),]
jpeg(paste0("pairplots/","CAD_Q","_",sername,"_twostate.jpg"))
p <- ggplot(temp, aes(x = Quarter, y = d,group=1))
p <- p + geom_line() + scale_x_discrete("Quarter", breaks=temp$Quarter[seq(1,length(temp$Quarter),12)])
p + ggtitle(maintext)
dev.off()
# p <- ggplot(temp, aes(x = Quarter, y = d,group=1))
# p <- p + geom_line() + scale_x_discrete("Quarter", breaks=temp$Quarter[seq(1,length(temp$Quarter),12)])
# p + ggtitle(maintext)
}
lapply(1:74, plot_specific)
sername <- colnames(dat)[serind]
# Code for plotting d estimations vs year of given pair for given dataset
plot_specific <- function(serind){
sername <- colnames(dat)[serind]
ser      <- ds[,serind]; maintext <- paste0(sername, " Quarterly, CAD")
temp <- data.frame(Quarter=tlabels,d = ser)
temp <- temp[!is.na(temp$d),]
jpeg(paste0("pairplots/","CAD_Q","_",sername,"_twostate.jpg"))
p <- ggplot(temp, aes(x = Quarter, y = d,group=1))
p <- p + geom_line() + scale_x_discrete("Quarter", breaks=temp$Quarter[seq(1,length(temp$Quarter),12)])
p + ggtitle(maintext)
dev.off()
# p <- ggplot(temp, aes(x = Quarter, y = d,group=1))
# p <- p + geom_line() + scale_x_discrete("Quarter", breaks=temp$Quarter[seq(1,length(temp$Quarter),12)])
# p + ggtitle(maintext)
Sys.sleep(.5)
}
lapply(1:74, plot_specific)
plot_specific(1)
ser      <- ds[,serind]; maintext <- paste0(sername, " Quarterly, CAD")
# Code for plotting d estimations vs year of given pair for given dataset
plot_specific <- function(serind){
sername <- colnames(dat)[serind]
ser      <- ds[,serind]; maintext <- paste0(sername, " Quarterly, CAD")
temp <- data.frame(Quarter=tlabels,d = ser)
temp <- temp[!is.na(temp$d),]
# jpeg(paste0("pairplots/","CAD_Q","_",sername,"_twostate.jpg"))
p <- ggplot(temp, aes(x = Quarter, y = d,group=1))
p <- p + geom_line() + scale_x_discrete("Quarter", breaks=temp$Quarter[seq(1,length(temp$Quarter),12)])
p <- p + ggtitle(maintext)
# dev.off()
ggsave(paste0("pairplots/","CAD_Q","_",sername,"_twostate.jpg"),p)
# p <- ggplot(temp, aes(x = Quarter, y = d,group=1))
# p <- p + geom_line() + scale_x_discrete("Quarter", breaks=temp$Quarter[seq(1,length(temp$Quarter),12)])
# p + ggtitle(maintext)
}
plot_specific(1)
lapply(1:74, plot_specific)
# Code for plotting d estimations vs year of given pair for given dataset
plot_specific <- function(serind){
sername <- colnames(dat)[serind]
ser      <- ds[,serind]; maintext <- paste0(sername, " Quarterly, CAD")
temp <- data.frame(Quarter=tlabels,d = ser)
temp <- temp[!is.na(temp$d),]
# jpeg(paste0("pairplots/","CAD_Q","_",sername,"_twostate.jpg"))
p <- ggplot(temp, aes(x = Quarter, y = d,group=1))
p <- p + geom_line() + scale_x_discrete("Quarter", breaks=temp$Quarter[seq(1,length(temp$Quarter),20)])
p <- p + ggtitle(maintext)
# dev.off()
ggsave(paste0("pairplots/","CAD_Q","_",sername,"_twostate.jpg"),p)
# p <- ggplot(temp, aes(x = Quarter, y = d,group=1))
# p <- p + geom_line() + scale_x_discrete("Quarter", breaks=temp$Quarter[seq(1,length(temp$Quarter),12)])
# p + ggtitle(maintext)
}
lapply(1:74, plot_specific)
source('~/CAD/dlvPath.R')
ress_3state  <- get(load(paste0("output/","CAD_quarterly_BOP_ress.rda")))
ress_3state
ress_3state <- totable(ress_3state)
ress_3state
ress_2state
ress_3state
pathss_3state <- lapply(1:nrow(ress_3state), function(x) dlvPath_dm3(ress_3state[x,1:13],processdat(dat[,x])))
pathss_3state
sapply(pathss_3state,dim)
head(ress_3state)
ischange  <- t(sapply(pathss_3state, function(p) {temp <- apply(p,1,sum) > 0; temp <- c(temp,temp,temp,T,temp); return(temp)}))
ischange
parss_3state  <- ress_3state[,-(14:15)] * ischange
parss_3state
colnames(parss_3state) <- c("d_1","d_2","d_3","P_11","P_22","P_33","P_12","P_21","P_31","sigma","mu_1","mu_2","mu_3")
write.csv(parss_3state, "CAD_quarterly_BOP_3state_results.csv")
ress_3state  <- get(load(paste0("output/","CAD_quarterly_BOP_ress.rda")))
ress_3state <- totable(ress_3state)
ress_3state
dat
pathss_3state <- lapply(1:nrow(ress_3state), function(x) dlvPath_dm3(ress_3state[x,1:13],processdat(dat[,x])))
ischange  <- t(sapply(pathss_3state, function(p) {temp <- apply(p,1,sum) > 0; temp <- c(temp,temp,temp,T,temp); return(temp)}))
parss_3state  <- ress_3state[,1:13] * ischange
parss_3state
ds  <- lapply(1:nrow(ress_3state), function(x) {matrix(ress_3state[x,1:3],1,) %*% dlvPath_dm3(ress_3state[x,1:13],processdat(dat[,x]))})
ds
# d estimations vs year for each pair
ds  <- lapply(1:nrow(ress_2state), function(x) {matrix(ress_2state[x,1:2],1,) %*% dlvPath_dm(ress_2state[x,1:7],processdat(dat[,x]))})
ds3 <- lapply(1:nrow(ress_3state), function(x) {matrix(ress_3state[x,1:3],1,) %*% dlvPath_dm3(ress_3state[x,1:13],processdat(dat[,x]))})
# Standardizing the length of ds
ds  <- sapply(1:ncol(dat), function(i) deprocessds(ds[[i]],dat[,i]))
ds3 <- sapply(1:ncol(dat), function(i) deprocessds(ds3[[i]],dat[,i]))
ds3
plot_specific3 <- function(serind){
sername <- colnames(dat)[serind]
ser      <- ds3[,serind]; maintext <- paste0(sername, " Quarterly, CAD")
temp <- data.frame(Quarter=tlabels,d = ser)
temp <- temp[!is.na(temp$d),]
p <- ggplot(temp, aes(x = Quarter, y = d,group=1))
p <- p + geom_line() + scale_x_discrete("Quarter", breaks=temp$Quarter[seq(1,length(temp$Quarter),20)])
p <- p + ggtitle(maintext)
ggsave(paste0("pairplots/","CAD_Q","_",sername,"_threestate.jpg"),p)
}
lapply(1:74, plot_specific3)
plot_specific3 <- function(serind){
sername <- colnames(dat)[serind]
ser      <- ds3[,serind]; maintext <- paste0(sername, " Quarterly, CAD, 3 State")
temp <- data.frame(Quarter=tlabels,d = ser)
temp <- temp[!is.na(temp$d),]
p <- ggplot(temp, aes(x = Quarter, y = d,group=1))
p <- p + geom_line() + scale_x_discrete("Quarter", breaks=temp$Quarter[seq(1,length(temp$Quarter),20)])
p <- p + ggtitle(maintext)
ggsave(paste0("pairplots/","CAD_Q","_",sername,"_threestate.jpg"),p)
}
lapply(1:74, plot_specific3)
p <- ggplot(temp, aes(x = Quarter, y = d,group=1))
p <- p + geom_line() + scale_x_discrete("Quarter", breaks=temp$Quarter[seq(1,length(temp$Quarter),20)])
p <- p + ggtitle(maintext) + theme(axis.text.x = element_text(face="bold", color="#993333",
size=14, angle=45))
p
p <- ggplot(temp, aes(x = Quarter, y = d,group=1))
p <- p + geom_line() + scale_x_discrete("Quarter", breaks=temp$Quarter[seq(1,length(temp$Quarter),20)])
p <- p + ggtitle(maintext) + theme(axis.text.x = element_text(angle=45))
p
p <- ggplot(temp, aes(x = Quarter, y = d,group=1))
p <- p + geom_line() + scale_x_discrete("Quarter", breaks=temp$Quarter[seq(1,length(temp$Quarter),20)])
p <- p + ggtitle(maintext) + if(nrow(temp)>200){theme(axis.text.x = element_text(angle=45))} else {NULL}
p
# Code for plotting d estimations vs year of given pair for given dataset
plot_specific <- function(serind){
sername <- colnames(dat)[serind]
ser      <- ds[,serind]; maintext <- paste0(sername, " Quarterly, CAD")
temp <- data.frame(Quarter=tlabels,d = ser)
temp <- temp[!is.na(temp$d),]
p <- ggplot(temp, aes(x = Quarter, y = d,group=1))
p <- p + geom_line() + scale_x_discrete("Quarter", breaks=temp$Quarter[seq(1,length(temp$Quarter),20)])
p <- p + ggtitle(maintext) + if(nrow(temp)>200){theme(axis.text.x = element_text(angle=45))} else {NULL}
ggsave(paste0("pairplots/","CAD_Q","_",sername,"_twostate.jpg"),p)
}
plot_specific3 <- function(serind){
sername <- colnames(dat)[serind]
ser      <- ds3[,serind]; maintext <- paste0(sername, " Quarterly, CAD, 3 State")
temp <- data.frame(Quarter=tlabels,d = ser)
temp <- temp[!is.na(temp$d),]
p <- ggplot(temp, aes(x = Quarter, y = d,group=1))
p <- p + geom_line() + scale_x_discrete("Quarter", breaks=temp$Quarter[seq(1,length(temp$Quarter),20)])
p <- p + ggtitle(maintext) + if(nrow(temp)>200){theme(axis.text.x = element_text(angle=45))} else {NULL}
ggsave(paste0("pairplots/","CAD_Q","_",sername,"_threestate.jpg"),p)
}
lapply(1:74, plot_specific3)
# Code for plotting d estimations vs year of given pair for given dataset
plot_specific <- function(serind){
sername <- colnames(dat)[serind]
ser      <- ds[,serind]; maintext <- paste0(sername, " Quarterly, CAD")
temp <- data.frame(Quarter=tlabels,d = ser)
temp <- temp[!is.na(temp$d),]
p <- ggplot(temp, aes(x = Quarter, y = d,group=1))
p <- p + geom_line() + scale_x_discrete("Quarter", breaks=temp$Quarter[seq(1,length(temp$Quarter),20)])
p <- p + ggtitle(maintext) + if(nrow(temp)>200){theme(axis.text.x = element_text(angle=45))} else {NULL}
ggsave(paste0("pairplots/","CAD_Q","_",sername,"_twostate.jpg"),p)
}
lapply(1:74, plot_specific)
# Code for plotting d estimations vs year of given pair for given dataset
plot_specific <- function(serind){
sername <- colnames(dat)[serind]
ser      <- ds[,serind]; maintext <- paste0(sername, " Quarterly, CAD, 2 State")
temp <- data.frame(Quarter=tlabels,d = ser)
temp <- temp[!is.na(temp$d),]
p <- ggplot(temp, aes(x = Quarter, y = d,group=1))
p <- p + geom_line() + scale_x_discrete("Quarter", breaks=temp$Quarter[seq(1,length(temp$Quarter),20)])
p <- p + ggtitle(maintext) + if(nrow(temp)>200){theme(axis.text.x = element_text(angle=45))} else {NULL}
ggsave(paste0("pairplots/","CAD_Q","_",sername,"_twostate.jpg"),p)
}
lapply(1:74, plot_specific)
